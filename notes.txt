By default all components in app directory are server components.
In server components the component is rendered on the server side and the data which is fetched by api is also cached.
Benifits -
Data fetching happens on server side.
Can keep sensitive data on server components like token, api keys.
caching
bundle sizes
initial page load
SEO
streaming.

Static Rendering(Next 13) Replaced with getStaticProps(Next 12)
Dynamic Rendering(Next 13) Replaced with getServerSideProps(Next 12)

By default all the server components are rendered staticly.
Means it will compile the project and cached the data on the server and after that if we request data again it will give cached version rather than fetching data again.

In Dynamic Rendering Routes are rendered for each user at a request time
(Here we prevent caching)



Caching - 

const response = await fetch('http://localhost:3000/api/rooms');

// Next js extends native fetch method so we can configure the behaviour of caching and revalidating.
// We can fetch data in server components only.

// We've done console.log("Rooms per page => ", rooms.resultsPerPage); => output will be Rooms per page 4
// Now if we go to controller file in room controller and change the value of resultsPerPage it will not reflect here it will be still 4 because Next JS serving us the cached version of data.

// So we are not getting the data dynamically from the backend on each request.

// If data doesn't change frequently we can use caching.
// If data changes frequently we can override the caching behaviour.


const response = await fetch('http://localhost:3000/api/rooms',{cache:'no-cache'});

// What is caching 
// Caching stores data so it doesn't need to be refetched from backend on every request.
// So If next time user makes request the cached data will be return.

// By default behaviour is "force-cache"
// We can override this using "no-cache" or "no-store"
